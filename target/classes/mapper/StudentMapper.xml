<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yi.mapper.StudentMapper" >
  <resultMap id="BaseResultMap" type="com.yi.entity.Student" >
    <id column="stuid" property="stuid" jdbcType="VARCHAR" />
    <result column="role_id" property="roleId" jdbcType="INTEGER" />
    <result column="petname" property="petname" jdbcType="VARCHAR" />
    <result column="stuname" property="stuname" jdbcType="VARCHAR" />
    <result column="stupassword" property="stupassword" jdbcType="VARCHAR" />
    <result column="stusex" property="stusex" jdbcType="VARCHAR" />
    <result column="stuage" property="stuage" jdbcType="INTEGER" />
    <result column="role" property="role" jdbcType="VARCHAR" />
    <result column="phone" property="phone" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="qq" property="qq" jdbcType="VARCHAR" />
    <result column="registertime" property="registertime" jdbcType="TIMESTAMP" />
    <result column="address" property="address" jdbcType="VARCHAR" />
    <result column="stuintroduce" property="stuintroduce" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    stuid, role_id, petname, stuname, stupassword, stusex, stuage, role, phone, email, 
    qq, registertime, address, stuintroduce
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.yi.entity.StudentExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from student
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from student
    where stuid = #{stuid,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from student
    where stuid = #{stuid,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.yi.entity.StudentExample" >
    delete from student
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.yi.entity.Student" >
    insert into student (stuid, role_id, petname, 
      stuname, stupassword, stusex, 
      stuage, role, phone, 
      email, qq, registertime, 
      address, stuintroduce)
    values (#{stuid,jdbcType=VARCHAR}, #{roleId,jdbcType=INTEGER}, #{petname,jdbcType=VARCHAR}, 
      #{stuname,jdbcType=VARCHAR}, #{stupassword,jdbcType=VARCHAR}, #{stusex,jdbcType=VARCHAR}, 
      #{stuage,jdbcType=INTEGER}, #{role,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, 
      #{email,jdbcType=VARCHAR}, #{qq,jdbcType=VARCHAR}, #{registertime,jdbcType=TIMESTAMP}, 
      #{address,jdbcType=VARCHAR}, #{stuintroduce,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.yi.entity.Student" >
    insert into student
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="stuid != null" >
        stuid,
      </if>
      <if test="roleId != null" >
        role_id,
      </if>
      <if test="petname != null" >
        petname,
      </if>
      <if test="stuname != null" >
        stuname,
      </if>
      <if test="stupassword != null" >
        stupassword,
      </if>
      <if test="stusex != null" >
        stusex,
      </if>
      <if test="stuage != null" >
        stuage,
      </if>
      <if test="role != null" >
        role,
      </if>
      <if test="phone != null" >
        phone,
      </if>
      <if test="email != null" >
        email,
      </if>
      <if test="qq != null" >
        qq,
      </if>
      <if test="registertime != null" >
        registertime,
      </if>
      <if test="address != null" >
        address,
      </if>
      <if test="stuintroduce != null" >
        stuintroduce,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="stuid != null" >
        #{stuid,jdbcType=VARCHAR},
      </if>
      <if test="roleId != null" >
        #{roleId,jdbcType=INTEGER},
      </if>
      <if test="petname != null" >
        #{petname,jdbcType=VARCHAR},
      </if>
      <if test="stuname != null" >
        #{stuname,jdbcType=VARCHAR},
      </if>
      <if test="stupassword != null" >
        #{stupassword,jdbcType=VARCHAR},
      </if>
      <if test="stusex != null" >
        #{stusex,jdbcType=VARCHAR},
      </if>
      <if test="stuage != null" >
        #{stuage,jdbcType=INTEGER},
      </if>
      <if test="role != null" >
        #{role,jdbcType=VARCHAR},
      </if>
      <if test="phone != null" >
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="qq != null" >
        #{qq,jdbcType=VARCHAR},
      </if>
      <if test="registertime != null" >
        #{registertime,jdbcType=TIMESTAMP},
      </if>
      <if test="address != null" >
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="stuintroduce != null" >
        #{stuintroduce,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.yi.entity.StudentExample" resultType="java.lang.Integer" >
    select count(*) from student
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update student
    <set >
      <if test="record.stuid != null" >
        stuid = #{record.stuid,jdbcType=VARCHAR},
      </if>
      <if test="record.roleId != null" >
        role_id = #{record.roleId,jdbcType=INTEGER},
      </if>
      <if test="record.petname != null" >
        petname = #{record.petname,jdbcType=VARCHAR},
      </if>
      <if test="record.stuname != null" >
        stuname = #{record.stuname,jdbcType=VARCHAR},
      </if>
      <if test="record.stupassword != null" >
        stupassword = #{record.stupassword,jdbcType=VARCHAR},
      </if>
      <if test="record.stusex != null" >
        stusex = #{record.stusex,jdbcType=VARCHAR},
      </if>
      <if test="record.stuage != null" >
        stuage = #{record.stuage,jdbcType=INTEGER},
      </if>
      <if test="record.role != null" >
        role = #{record.role,jdbcType=VARCHAR},
      </if>
      <if test="record.phone != null" >
        phone = #{record.phone,jdbcType=VARCHAR},
      </if>
      <if test="record.email != null" >
        email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.qq != null" >
        qq = #{record.qq,jdbcType=VARCHAR},
      </if>
      <if test="record.registertime != null" >
        registertime = #{record.registertime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.address != null" >
        address = #{record.address,jdbcType=VARCHAR},
      </if>
      <if test="record.stuintroduce != null" >
        stuintroduce = #{record.stuintroduce,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update student
    set stuid = #{record.stuid,jdbcType=VARCHAR},
      role_id = #{record.roleId,jdbcType=INTEGER},
      petname = #{record.petname,jdbcType=VARCHAR},
      stuname = #{record.stuname,jdbcType=VARCHAR},
      stupassword = #{record.stupassword,jdbcType=VARCHAR},
      stusex = #{record.stusex,jdbcType=VARCHAR},
      stuage = #{record.stuage,jdbcType=INTEGER},
      role = #{record.role,jdbcType=VARCHAR},
      phone = #{record.phone,jdbcType=VARCHAR},
      email = #{record.email,jdbcType=VARCHAR},
      qq = #{record.qq,jdbcType=VARCHAR},
      registertime = #{record.registertime,jdbcType=TIMESTAMP},
      address = #{record.address,jdbcType=VARCHAR},
      stuintroduce = #{record.stuintroduce,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.yi.entity.Student" >
    update student
    <set >
      <if test="roleId != null" >
        role_id = #{roleId,jdbcType=INTEGER},
      </if>
      <if test="petname != null" >
        petname = #{petname,jdbcType=VARCHAR},
      </if>
      <if test="stuname != null" >
        stuname = #{stuname,jdbcType=VARCHAR},
      </if>
      <if test="stupassword != null" >
        stupassword = #{stupassword,jdbcType=VARCHAR},
      </if>
      <if test="stusex != null" >
        stusex = #{stusex,jdbcType=VARCHAR},
      </if>
      <if test="stuage != null" >
        stuage = #{stuage,jdbcType=INTEGER},
      </if>
      <if test="role != null" >
        role = #{role,jdbcType=VARCHAR},
      </if>
      <if test="phone != null" >
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="qq != null" >
        qq = #{qq,jdbcType=VARCHAR},
      </if>
      <if test="registertime != null" >
        registertime = #{registertime,jdbcType=TIMESTAMP},
      </if>
      <if test="address != null" >
        address = #{address,jdbcType=VARCHAR},
      </if>
      <if test="stuintroduce != null" >
        stuintroduce = #{stuintroduce,jdbcType=VARCHAR},
      </if>
    </set>
    where stuid = #{stuid,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.yi.entity.Student" >
    update student
    set role_id = #{roleId,jdbcType=INTEGER},
      petname = #{petname,jdbcType=VARCHAR},
      stuname = #{stuname,jdbcType=VARCHAR},
      stupassword = #{stupassword,jdbcType=VARCHAR},
      stusex = #{stusex,jdbcType=VARCHAR},
      stuage = #{stuage,jdbcType=INTEGER},
      role = #{role,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      qq = #{qq,jdbcType=VARCHAR},
      registertime = #{registertime,jdbcType=TIMESTAMP},
      address = #{address,jdbcType=VARCHAR},
      stuintroduce = #{stuintroduce,jdbcType=VARCHAR}
    where stuid = #{stuid,jdbcType=VARCHAR}
  </update>
</mapper>